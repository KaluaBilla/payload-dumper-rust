name: Linux Build

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        architecture: [x86_64, aarch64, armv7, i686]
      fail-fast: false

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      
      - name: Set target
        id: set-target
        run: |
          case "${{ matrix.architecture }}" in
            x86_64)
              echo "TARGET=x86_64-unknown-linux-musl" >> $GITHUB_ENV
              echo "NEED_CROSS=false" >> $GITHUB_ENV
              echo "ARCH_DIR=x86_64" >> $GITHUB_ENV
              ;;
            aarch64)
              echo "TARGET=aarch64-unknown-linux-musl" >> $GITHUB_ENV
              echo "TOOLCHAIN_URL=https://musl.cc/aarch64-linux-musl-cross.tgz" >> $GITHUB_ENV
              echo "CC=aarch64-linux-musl-gcc" >> $GITHUB_ENV
              echo "ARCH_DIR=aarch64" >> $GITHUB_ENV
              echo "NEED_CROSS=true" >> $GITHUB_ENV
              ;;
            armv7)
              echo "TARGET=armv7-unknown-linux-musleabihf" >> $GITHUB_ENV
              echo "TOOLCHAIN_URL=https://musl.cc/armv7l-linux-musleabihf-cross.tgz" >> $GITHUB_ENV
              echo "CC=armv7l-linux-musleabihf-gcc" >> $GITHUB_ENV
              echo "ARCH_DIR=armv7" >> $GITHUB_ENV
              echo "NEED_CROSS=true" >> $GITHUB_ENV
              ;;
            i686)
              echo "TARGET=i686-unknown-linux-musl" >> $GITHUB_ENV
              echo "TOOLCHAIN_URL=https://musl.cc/i686-linux-musl-cross.tgz" >> $GITHUB_ENV
              echo "CC=i686-linux-musl-gcc" >> $GITHUB_ENV
              echo "ARCH_DIR=x86" >> $GITHUB_ENV
              echo "NEED_CROSS=true" >> $GITHUB_ENV
              ;;
          esac

      
      - name: Add Rust target
        run: rustup target add ${{ env.TARGET }}

      
      - name: Install musl-tools
        if: env.NEED_CROSS == 'false'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl musl-tools musl-dev

      - name: Download MUSL Compiler
        if: env.NEED_CROSS == 'true'
        run: |
          mkdir -p /tmp/musl-cross
          cd /tmp/musl-cross
          wget ${{ env.TOOLCHAIN_URL }} -O toolchain.tgz
          tar -xzf toolchain.tgz
          find /tmp/musl-cross -name "${{ env.CC }}" -type f
          TOOLCHAIN_BIN=$(find /tmp/musl-cross -name "${{ env.CC }}" -type f | xargs dirname)
          echo "PATH=$PATH:$TOOLCHAIN_BIN" >> $GITHUB_ENV
          echo "Added $TOOLCHAIN_BIN to PATH"
          echo "CC=$TOOLCHAIN_BIN/${{ env.CC }}" >> $GITHUB_ENV

      - name: Setup config
        if: env.NEED_CROSS == 'true'
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml << EOF
          [target.${{ env.TARGET }}]
          linker = "${{ env.CC }}"
          EOF
          cat .cargo/config.toml

      - name: Set up environment
        run: |
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$PWD/lib/musl/${{ env.ARCH_DIR }}" >> $GITHUB_ENV
          echo "Architecture: ${{ matrix.architecture }} - Library path: $PWD/lib/musl/${{ env.ARCH_DIR }}"
          
          # Verify directories
          echo "Checking library directories:"
          ls -la $PWD/lib/musl || echo "No lib directory found"
          ls -la $PWD/lib/musl/${{ env.ARCH_DIR }} || echo "No architecture-specific lib directory found"

      - name: Build for ${{ matrix.architecture }}
        run: |
          echo "Building for ${{ env.TARGET }}"
          if [ "${{ env.NEED_CROSS }}" = "true" ]; then
            echo "Cross-compiling with ${{ env.CC }}"
            echo "PATH: $PATH"
            which ${{ env.CC }} || echo "Cross compiler not found in PATH"
          fi
          cargo build --release --target ${{ env.TARGET }} -v
        env:
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_PATH: ${{ github.workspace }}/lib/musl/${{ env.ARCH_DIR }}
          RUSTFLAGS: '-C target-feature=+crt-static'

     
      - name: Create Dir
        run: mkdir -p artifacts

      - name: Copy binaries
        run: |
          cp target/${{ env.TARGET }}/release/payload_dumper ./artifacts/payload_dumper-${{ matrix.architecture }} || echo "Binary not found"
          # Make it executable if it exists
          if [ -f ./artifacts/payload_dumper-${{ matrix.architecture }} ]; then
            chmod +x ./artifacts/payload_dumper-${{ matrix.architecture }}
          else
            echo "Failed to find binary"
            find target -type f -executable | grep -v '\.so' | sort
          fi

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: payload_dumper-${{ matrix.architecture }}-linux-musl
          path: artifacts/payload_dumper-${{ matrix.architecture }}
          if-no-files-found: warn
