name: Android Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [aarch64, armv7, x86_64, x86]
        include:
          - arch: aarch64
            target: aarch64-linux-android
            lib_dir: arm64-v8a
            android_abi: arm64-v8a
            clang_target: aarch64-linux-android21-clang
          - arch: armv7
            target: armv7-linux-androideabi
            lib_dir: armv7
            android_abi: armeabi-v7a
            clang_target: armv7a-linux-androideabi21-clang
          - arch: x86_64
            target: x86_64-linux-android
            lib_dir: x86_64
            android_abi: x86_64
            clang_target: x86_64-linux-android21-clang
          - arch: x86
            target: i686-linux-android
            lib_dir: x86
            android_abi: x86
            clang_target: i686-linux-android21-clang
    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Install Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27d
          add-to-path: true

      - name: Set up environment
        run: |
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV
        
          sudo ln -sf $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.clang_target }} $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.arch }}-linux-android-clang
        
          echo "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

          if [ "${{ matrix.arch }}" = "x86" ]; then
            echo "CC_i686_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.clang_target }}" >> $GITHUB_ENV
            echo "AR_i686_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
            sudo ln -sf $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.clang_target }} $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android-clang
          fi

          if [ "${{ matrix.arch }}" = "armv7" ]; then
            echo "CC_arm_linux_androideabi=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.clang_target }}" >> $GITHUB_ENV
            sudo ln -sf $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.clang_target }} $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/arm-linux-androideabi-clang
            sudo ln -sf $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.clang_target }} $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7-linux-androideabi-clang
          fi

          # Create .cargo/config.toml
          mkdir -p .cargo
          cat > .cargo/config.toml << EOF
          [target.${{ matrix.target }}]
          linker = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.clang_target }}"
          EOF

      - name: Build for Android ${{ matrix.arch }}
        run: |
          cargo build --release --target ${{ matrix.target }} --all-features

      - name: Verify binary
        run: |
          file target/${{ matrix.target }}/release/payload_dumper
          ls -lh target/${{ matrix.target }}/release/payload_dumper

      - name: Upload binary as individual artifact
        uses: actions/upload-artifact@v4
        with:
          name: payload_dumper-android-${{ matrix.android_abi }}
          path: target/${{ matrix.target }}/release/payload_dumper
          if-no-files-found: error

  pack-module:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Get commit hash
        id: get_commit
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      - name: Create module
        run: |
          
          mkdir -p module/uncommon
      
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: binaries
          
      - name: Prepare Magisk module
        run: |
          mkdir -p module/uncommon
          cp binaries/payload_dumper-android-arm64-v8a/payload_dumper module/uncommon/payload_dumper-arm64-v8a
          cp binaries/payload_dumper-android-armeabi-v7a/payload_dumper module/uncommon/payload_dumper-armeabi-v7a
          cp binaries/payload_dumper-android-x86/payload_dumper module/uncommon/payload_dumper-x86
          cp binaries/payload_dumper-android-x86_64/payload_dumper module/uncommon/payload_dumper-x86_64
          
          # Set executable permissions
          chmod +x module/uncommon/payload_dumper-*
          
          
          if [ -f module/module.prop ]; then
            # Update version with gh-actions-{commit}
            sed -i "s/^version=.*/version=gh-actions-${{ steps.get_commit.outputs.SHORT_SHA }}/" module/module.prop
            
            
            sed -i '/^updateJson=/d' module/module.prop
          else
            echo "Error: module.prop not found in module directory!"
            exit 1
          fi
          
          
          echo "MODULE_VERSION=gh-actions-${{ steps.get_commit.outputs.SHORT_SHA }}" >> $GITHUB_ENV
          
          # List the contents of the module directory for verification
          ls -la module/
          ls -la module/uncommon/
          
          
          echo "Contents of module.prop:"
          cat module/module.prop

      - name: Upload Magisk module
        uses: actions/upload-artifact@v4
        with:
          name: payload-dumper-magisk-module-android-${{ env.MODULE_VERSION }}
          path: module/
          if-no-files-found: error
