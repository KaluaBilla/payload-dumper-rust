name: Windows MSVC Builds

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        architecture: [x86_64, i686]
      fail-fast: false

    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.architecture == 'x86_64' && 'x64' || matrix.architecture == 'i686' && 'x86' }}

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Set target and environment
        shell: pwsh
        run: |
          switch ("${{ matrix.architecture }}") {
            "x86_64" {
              echo "TARGET=x86_64-pc-windows-msvc" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              echo "ARCH_DIR=x64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            }
            "i686" {
              echo "TARGET=i686-pc-windows-msvc" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              echo "ARCH_DIR=x86" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            }
          }
          
          # Set environment variables for static linking
          echo "RUSTFLAGS=-C target-feature=+crt-static" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Add Rust target
        run: rustup target add ${{ env.TARGET }}

      - name: Build for ${{ matrix.architecture }}
        shell: pwsh
        run: |
          Write-Host "Building for ${{ env.TARGET }}"
          if (Test-Path "build.rs") { Remove-Item "build.rs" }
          cargo build --release --target ${{ env.TARGET }} --features differential_ota
        env:
          RUSTFLAGS: -C target-feature=+crt-static

      - name: Create artifacts directory
        shell: pwsh
        run: New-Item -ItemType Directory -Force -Path artifacts

      - name: Copy binaries
        shell: pwsh
        run: |
          $binaryPath = "target\${{ env.TARGET }}\release\payload_dumper.exe"
          $outputPath = "artifacts\payload_dumper-${{ matrix.architecture }}.exe"
          
          if (Test-Path $binaryPath) {
            Copy-Item $binaryPath $outputPath
            Write-Host "Binary copied successfully"
          } else {
            Write-Host "Binary not found at $binaryPath"
            Write-Host "Searching for exe files:"
            Get-ChildItem -Path target -Recurse -Filter "*.exe" | Sort-Object FullName
          }

      - name: Verify static linking
        shell: pwsh
        run: |
          $binary = "artifacts\payload_dumper-${{ matrix.architecture }}.exe"
          if (Test-Path $binary) {
            Write-Host "Binary exists and should be statically linked"
            # You can add additional verification here if needed
          }

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: payload_dumper-${{ matrix.architecture }}-windows-msvc
          path: artifacts/payload_dumper-${{ matrix.architecture }}.exe
          if-no-files-found: warn
